<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ChordPro Formatter</title>
    <link rel="stylesheet" href="/styles.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.2/html2pdf.bundle.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        .pdf-container {
            width: 90%;
            background: white;
            color: #333;
            font-family: 'Fira Code', monospace;
            padding: 20px;
            box-sizing: border-box;
            margin-top: 20px !important;
            margin-bottom: 20px !important;
            margin-left: 20px !important;
        }

        @media print {
            body {
                background: white !important;
                padding: 0 !important;
                margin: 0 !important;
            }

            .container {
                display: block !important;
                max-width: 100% !important;
            }

            .editor {
                display: none !important;
            }

            .output-area {
                width: 100% !important;
                padding: 0 !important;
                margin: 0 !important;
                box-shadow: none !important;
                border-radius: 0 !important;
            }

            .title {
                font-size: 24px !important;
                margin-top: 10px !important;
            }

            .artist,
            .key {
                font-size: 14px !important;
            }

            .verse-container,
            .chorus-container,
            .tab-section {
                page-break-inside: avoid !important;
                /* Prevents splitting */
                break-inside: avoid-column !important;
                /* Reinforces for browsers */
                display: block !important;
            }
        }
    </style>
</head>

<body>
    <header>
        <h1><i class="fas fa-music"></i> ChordPro Formatter</h1>
        <p>Convert ChordPro notation to formatted sheet music</p>
    </header>

    <div class="container">
        <div class="editor">
            <div class="editor-header">
                <h2><i class="fas fa-edit"></i> Input</h2>
            </div>
            <textarea id="chordProEditor" placeholder="Paste ChordPro text here..."></textarea>
            <div class="button-group">
                <button id="renderButton"><i class="fas fa-play-circle"></i> Render</button>
                <button id="printButton"><i class="fas fa-file-pdf"></i> Export PDF</button>
                <button id="clearButton"><i class="fas fa-trash-alt"></i> Clear</button>
            </div>
        </div>

        <div class="output-area">
            <div class="output-header">
                <h2><i class="fas fa-file-alt"></i> Output</h2>
                <div class="status-indicator">
                    <span id="statusText">Ready</span>
                    <div id="loadingSpinner" class="spinner hidden"></div>
                </div>
            </div>
            <div id="metadata" class="metadata"><%- metadata %></div>
            <div id="song-content">
                <div id="output"><%- output %></div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const chordProEditor = document.getElementById("chordProEditor");
            const renderButton = document.getElementById("renderButton");
            const printButton = document.getElementById("printButton");
            const clearButton = document.getElementById("clearButton");
            //const exampleButton = document.getElementById("exampleButton");
            const statusText = document.getElementById("statusText");
            const loadingSpinner = document.getElementById("loadingSpinner");
            const outputArea = document.getElementById("output");
            const metadataArea = document.getElementById("metadata");
            const songContent = document.getElementById("song-content");

            // Set editor focus on load
            chordProEditor.focus();

            // Clear button handler
            clearButton.addEventListener("click", () => {
                chordProEditor.value = "";
                metadataArea.innerHTML = "";
                outputArea.innerHTML = "";
                chordProEditor.focus();
                statusText.textContent = "Cleared";
                setTimeout(() => statusText.textContent = "Ready", 2000);
            });

            // Render button handler
            renderButton.addEventListener("click", async () => {
                const chordProText = chordProEditor.value.trim();

                if (!chordProText) {
                    statusText.textContent = "Please enter ChordPro text";
                    setTimeout(() => statusText.textContent = "Ready", 3000);
                    return;
                }

                try {
                    // Show loading state
                    renderButton.disabled = true;
                    printButton.disabled = true;
                    loadingSpinner.classList.remove("hidden");
                    statusText.textContent = "Processing...";

                    const response = await fetch("/render", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ chordPro: chordProText })
                    });

                    if (!response.ok) {
                        throw new Error(`Server error: ${response.status}`);
                    }

                    const data = await response.json();
                    metadataArea.innerHTML = data.metadata;
                    outputArea.innerHTML = data.output;

                    console.log("Debug: Rendered Output", data.output);

                    statusText.textContent = "Rendered successfully";
                    setTimeout(() => statusText.textContent = "Ready", 2000);
                } catch (error) {
                    console.error("Render error:", error);
                    statusText.textContent = `Error: ${error.message}`;
                    setTimeout(() => statusText.textContent = "Ready", 5000);
                } finally {
                    // Reset loading state
                    renderButton.disabled = false;
                    printButton.disabled = false;
                    loadingSpinner.classList.add("hidden");
                }
            });

            // Print to PDF button handler - FIXED VERSION
            printButton.addEventListener("click", () => {
                if (!songContent.textContent.trim()) {
                    statusText.textContent = "Nothing to export";
                    setTimeout(() => statusText.textContent = "Ready", 3000);
                    return;
                }

                try {
                    console.log("Debug: Exporting PDF with content:", outputArea.innerHTML);

                    const title = document.querySelector(".title")?.textContent.trim() || "Untitled";
                    const artist = document.querySelector(".artist")?.textContent.trim() || "";
                    const filename = artist ? `${title}-${artist}.pdf` : `${title}.pdf`;

                    statusText.textContent = "Exporting PDF...";
                    printButton.disabled = true;
                    const pdfContainer = document.createElement("div");
                    pdfContainer.className = "pdf-container";
                    pdfContainer.style.margin = "0";
                    pdfContainer.style.padding = "0";
                    if (!metadataArea.innerHTML.trim() || !outputArea.innerHTML.trim()) {
                        console.error("PDF Export Error: Metadata or output is empty");
                        statusText.textContent = "Error: Missing data for PDF";
                        return;
                    }
                    pdfContainer.innerHTML = metadataArea.innerHTML.trim() + outputArea.innerHTML.trim();

                    // Remove any extra empty lines before export
                    [...pdfContainer.children].forEach(child => {
                        if (child.innerHTML.trim() === "" || child.tagName === "BR") {
                            pdfContainer.removeChild(child);
                        }
                    });

                    document.body.appendChild(pdfContainer);
                    window.scrollTo(0, 0);
                    html2pdf()
                        .set({
                            margin: 10,
                            filename: filename,
                            image: { type: "jpeg", quality: 0.98 },
                            html2canvas: { scale: 2 },
                            jsPDF: {
                                unit: "mm", format: "a4",
                                orientation: "portrait"
                            }
                        })
                        .from(pdfContainer)
                        .to('pdf')
                        .save()
                        .then(() => {
                            console.log("Debug: PDF export successful");
                            statusText.textContent = "PDF exported successfully";
                        })
                        .catch(error => {
                            console.error("PDF export error:", error);
                            statusText.textContent = "PDF export failed";
                        })
                        .finally(() => {
                            document.body.removeChild(pdfContainer);
                            printButton.disabled = false;
                        });
                } catch (error) {
                    console.error("PDF export error:", error);
                    statusText.textContent = "PDF export failed";
                    printButton.disabled = false;
                }
            });
        });


    </script>

</body>

</html>