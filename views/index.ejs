<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ChordPro Formatter</title>
    <link rel="stylesheet" href="/styles.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.2/html2pdf.bundle.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
</head>

<body>
    <header>
        <h1><i class="fas fa-music"></i> ChordPro Formatter</h1>
        <p>Convert ChordPro notation to beautifully formatted sheet music</p>
    </header>

    <div class="container">
        <div class="editor">
            <div class="editor-header">
                <h2><i class="fas fa-edit"></i> Input</h2>
                <div class="examples">
                    <button id="exampleButton">Load Example</button>
                </div>
            </div>
            <textarea id="chordProEditor" placeholder="Paste ChordPro text here..."></textarea>
            <div class="button-group">
                <button id="renderButton"><i class="fas fa-play-circle"></i> Render</button>
                <button id="printButton"><i class="fas fa-file-pdf"></i> Export PDF</button>
                <button id="clearButton"><i class="fas fa-trash-alt"></i> Clear</button>
            </div>
        </div>

        <div class="output-area">
            <div class="output-header">
                <h2><i class="fas fa-file-alt"></i> Output</h2>
                <div class="status-indicator">
                    <span id="statusText">Ready</span>
                    <div id="loadingSpinner" class="spinner hidden"></div>
                </div>
            </div>
            <div id="metadata" class="metadata"><%- metadata %></div>
            <div id="output"><%- output %></div>
        </div>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const chordProEditor = document.getElementById("chordProEditor");
            const renderButton = document.getElementById("renderButton");
            const printButton = document.getElementById("printButton");
            const clearButton = document.getElementById("clearButton");
            const exampleButton = document.getElementById("exampleButton");
            const statusText = document.getElementById("statusText");
            const loadingSpinner = document.getElementById("loadingSpinner");
            const outputArea = document.getElementById("output");
            const metadataArea = document.getElementById("metadata");

            // Example ChordPro text
            const exampleChordPro = `{title: Hotel California}
{artist: Eagles}
{key: Bm}

{start_of_chorus}
[Am]Welcome to the [E7]Hotel Cali[G]fornia
[D]Such a lovely [F]place, [C]such a lovely [E7]face
{end_of_chorus}

{start_of_verse: Verse 1}
[G]On a dark desert highway, [D]cool wind in my hair
[Em]Warm smell of colitas, [F]rising up through the air
{end_of_verse}

{comment: Guitar Solo}
{start_of_tab}
e|-----0-----0-----0-----0-----|
B|---1---1-----1-----1-----1---|
G|-----2-----0-----0-----0-----|
D|-----------------------------|
A|-----------------------------|
E|-----------------------------|
{end_of_tab}`;

            // Set editor focus on load
            chordProEditor.focus();
            
            // Load example button handler
            exampleButton.addEventListener("click", () => {
                chordProEditor.value = exampleChordPro;
                statusText.textContent = "Example loaded";
                setTimeout(() => statusText.textContent = "Ready", 2000);
            });
            
            // Clear button handler
            clearButton.addEventListener("click", () => {
                chordProEditor.value = "";
                metadataArea.innerHTML = "";
                outputArea.innerHTML = "";
                chordProEditor.focus();
                statusText.textContent = "Cleared";
                setTimeout(() => statusText.textContent = "Ready", 2000);
            });
            
            // Render button handler
            renderButton.addEventListener("click", async () => {
                const chordProText = chordProEditor.value.trim();
                
                if (!chordProText) {
                    statusText.textContent = "Please enter ChordPro text";
                    setTimeout(() => statusText.textContent = "Ready", 3000);
                    return;
                }
                
                try {
                    // Show loading state
                    renderButton.disabled = true;
                    printButton.disabled = true;
                    loadingSpinner.classList.remove("hidden");
                    statusText.textContent = "Processing...";
                    
                    const response = await fetch("/render", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ chordPro: chordProText })
                    });
                    
                    if (!response.ok) {
                        throw new Error(`Server error: ${response.status}`);
                    }
                    
                    const data = await response.json();
                    metadataArea.innerHTML = data.metadata;
                    outputArea.innerHTML = data.output;
                    
                    statusText.textContent = "Rendered successfully";
                    setTimeout(() => statusText.textContent = "Ready", 2000);
                } catch (error) {
                    console.error("Render error:", error);
                    statusText.textContent = `Error: ${error.message}`;
                    setTimeout(() => statusText.textContent = "Ready", 5000);
                } finally {
                    // Reset loading state
                    renderButton.disabled = false;
                    printButton.disabled = false;
                    loadingSpinner.classList.add("hidden");
                }
            });
            
            // Print to PDF button handler
            printButton.addEventListener("click", () => {
                const content = document.querySelector(".output-area");
                
                if (!content.textContent.trim()) {
                    statusText.textContent = "Nothing to export";
                    setTimeout(() => statusText.textContent = "Ready", 3000);
                    return;
                }
                
                try {
                    // Extract title and artist from metadata
                    const title = document.querySelector(".title")?.textContent.trim() || "Untitled";
                    const artist = document.querySelector(".artist")?.textContent.trim() || "";
                    
                    // Construct filename
                    const filename = artist ? `${title}-${artist}.pdf` : `${title}.pdf`;
                    
                    // Show exporting state
                    printButton.disabled = true;
                    statusText.textContent = "Exporting PDF...";
                    
                    html2pdf()
                        .set({
                            margin: [10, 10, 10, 10],
                            filename: filename,
                            image: { type: "jpeg", quality: 0.98 },
                            html2canvas: { 
                                scale: 2,
                                useCORS: true,
                                logging: false
                            },
                            jsPDF: { 
                                unit: "mm", 
                                format: "a4", 
                                orientation: "portrait",
                                compress: true
                            }
                        })
                        .from(content)
                        .save()
                        .then(() => {
                            statusText.textContent = "PDF exported successfully";
                            setTimeout(() => statusText.textContent = "Ready", 3000);
                        })
                        .catch(error => {
                            console.error("PDF export error:", error);
                            statusText.textContent = "PDF export failed";
                            setTimeout(() => statusText.textContent = "Ready", 5000);
                        })
                        .finally(() => {
                            printButton.disabled = false;
                        });
                } catch (error) {
                    console.error("PDF export error:", error);
                    statusText.textContent = "PDF export failed";
                    setTimeout(() => statusText.textContent = "Ready", 5000);
                    printButton.disabled = false;
                }
            });
        });
    </script>

</body>

</html>